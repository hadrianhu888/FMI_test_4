% Autogenerated file: Sat Sep 24 16:49:41 2022
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('tlc\codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;

prmIdxMap = containers.Map;




wr = coder.internal.writeDataInterfacesToCodeDescriptor("test_fmi",pwd) ;
wr.writeName(codeInfo.Name);



skippedParameters = [];




            





            tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;

        

            % Opaque Data Type
            type_RTModel  = coder.types.Opaque;
            type_RTModel.Identifier = 'RT_MODEL_test_fmi_T';
            

        % Pointer Type: Pointer to type_RTModel
        Ptrtype_RTModel_1_0 = coder.types.Pointer;
            Ptrtype_RTModel_1_0.BaseType = type_RTModel;
        Ptrtype_RTModel_1_0.ReadOnly = 1;
        Ptrtype_RTModel_1_0.Volatile = 0;
        

        % Variable: Var_RTModel
        Var_RTModel = RTW.Variable(type_RTModel, 'test_fmi_M_');
        Var_RTModel.Owner           = '';
        Var_RTModel.DeclarationFile = '';
        

        % Pointer Variable: PtrVar_RTModel
        PtrVar_RTModel = RTW.PointerVariable(Ptrtype_RTModel_1_0, 'test_fmi_M', Var_RTModel);
        

        % Data Interface: idata_RTModel
            empty_timing = RTW.TimingInterface.empty;
        idata_RTModel = RTW.DataInterface('', 'RTModel', PtrVar_RTModel, empty_timing);
        
            writeCodeInfoFcn_RTArg = coder.types.Argument;
            writeCodeInfoFcn_RTArg.Type   = Ptrtype_RTModel_1_0;
            writeCodeInfoFcn_RTArg.Name   = 'test_fmi_M';
            writeCodeInfoFcn_RTArg.IOType = 'INPUT_OUTPUT';

            tmpArgs    = [tmpArgs, writeCodeInfoFcn_RTArg];
            tmpActualArgs = [tmpActualArgs, idata_RTModel];

                


    % Data Interface: ExternalInput
    idata_ExternalInput = getInternalDataByName(codeInfo.InternalData, 'ExternalInput');

    % Type of : idata_ExternalInput
    if isa(idata_ExternalInput.Implementation,'RTW.PointerExpression')
    type_idata_ExternalInput = idata_ExternalInput.Implementation.TargetRegion.Type;
    else
    type_idata_ExternalInput = idata_ExternalInput.Implementation.Type;
    end

        % Pointer Type: Pointer to type_idata_ExternalInput
        Ptrtype_idata_ExternalInput_0_0 = coder.types.Pointer;
            Ptrtype_idata_ExternalInput_0_0.BaseType = type_idata_ExternalInput;
        Ptrtype_idata_ExternalInput_0_0.ReadOnly = 0;
        Ptrtype_idata_ExternalInput_0_0.Volatile = 0;
        

                        if ~isa(idata_ExternalInput.Implementation,'RTW.PointerExpression')


        % Structure Element: StructElem_PointerExpr_rt_ExternalInput
        StructElem_PointerExpr_rt_ExternalInput = coder.types.AggregateElement;
        StructElem_PointerExpr_rt_ExternalInput.Identifier = 'inputs';
        StructElem_PointerExpr_rt_ExternalInput.Type = Ptrtype_idata_ExternalInput_0_0;


        % Pointer Expression: PointerExpr_rt_ExternalInput
        PointerExpr_rt_ExternalInput = RTW.PointerExpression(StructElem_PointerExpr_rt_ExternalInput, PtrVar_RTModel, idata_ExternalInput.Implementation);
        


                        idata_ExternalInput.Implementation = PointerExpr_rt_ExternalInput;
                        wr.updateInternalData(PointerExpr_rt_ExternalInput, 'ExternalInput');
                        end


    % Data Interface: ExternalOutput
    idata_ExternalOutput = getInternalDataByName(codeInfo.InternalData, 'ExternalOutput');

    % Type of : idata_ExternalOutput
    if isa(idata_ExternalOutput.Implementation,'RTW.PointerExpression')
    type_idata_ExternalOutput = idata_ExternalOutput.Implementation.TargetRegion.Type;
    else
    type_idata_ExternalOutput = idata_ExternalOutput.Implementation.Type;
    end

        % Pointer Type: Pointer to type_idata_ExternalOutput
        Ptrtype_idata_ExternalOutput_0_0 = coder.types.Pointer;
            Ptrtype_idata_ExternalOutput_0_0.BaseType = type_idata_ExternalOutput;
        Ptrtype_idata_ExternalOutput_0_0.ReadOnly = 0;
        Ptrtype_idata_ExternalOutput_0_0.Volatile = 0;
        

                        if ~isa(idata_ExternalOutput.Implementation,'RTW.PointerExpression')


        % Structure Element: StructElem_PointerExpr_rt_ExternalOutput
        StructElem_PointerExpr_rt_ExternalOutput = coder.types.AggregateElement;
        StructElem_PointerExpr_rt_ExternalOutput.Identifier = 'outputs';
        StructElem_PointerExpr_rt_ExternalOutput.Type = Ptrtype_idata_ExternalOutput_0_0;


        % Pointer Expression: PointerExpr_rt_ExternalOutput
        PointerExpr_rt_ExternalOutput = RTW.PointerExpression(StructElem_PointerExpr_rt_ExternalOutput, PtrVar_RTModel, idata_ExternalOutput.Implementation);
        


                        idata_ExternalOutput.Implementation = PointerExpr_rt_ExternalOutput;
                        wr.updateInternalData(PointerExpr_rt_ExternalOutput, 'ExternalOutput');
                        end

        


        

    func_Initialize_Prototype = coder.types.Prototype;
    func_Initialize_Prototype.Arguments  = tmpArgs;
    func_Initialize_Prototype.Return     = tmpRet;

        func_Initialize_Prototype.HeaderFile = 'test_fmi.h';
    func_Initialize_Prototype.SourceFile = 'test_fmi.c';

    func_Initialize_Interface = RTW.FunctionInterface;
    func_Initialize_Interface.Prototype    = func_Initialize_Prototype;
    func_Initialize_Interface.ActualArgs   = tmpActualArgs;
    func_Initialize_Interface.ActualReturn = tmpActualReturn;

        func_Initialize_Prototype.Name = 'test_fmi_initialize';
    time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
        func_Initialize_Interface.Timing = time_constant;
        codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions, func_Initialize_Interface'];
        func_Initialize_Interface.IsInitializeFunction = true;

                tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;

        

                


    % Data Interface: ExternalInput
    idata_ExternalInput = getInternalDataByName(codeInfo.InternalData, 'ExternalInput');

    % Type of : idata_ExternalInput
    if isa(idata_ExternalInput.Implementation,'RTW.PointerExpression')
    type_idata_ExternalInput = idata_ExternalInput.Implementation.TargetRegion.Type;
    else
    type_idata_ExternalInput = idata_ExternalInput.Implementation.Type;
    end

                        if ~isa(idata_ExternalInput.Implementation,'RTW.PointerExpression')


                        idata_ExternalInput.Implementation = PointerExpr_rt_ExternalInput;
                        wr.updateInternalData(PointerExpr_rt_ExternalInput, 'ExternalInput');
                        end


    % Data Interface: ExternalOutput
    idata_ExternalOutput = getInternalDataByName(codeInfo.InternalData, 'ExternalOutput');

    % Type of : idata_ExternalOutput
    if isa(idata_ExternalOutput.Implementation,'RTW.PointerExpression')
    type_idata_ExternalOutput = idata_ExternalOutput.Implementation.TargetRegion.Type;
    else
    type_idata_ExternalOutput = idata_ExternalOutput.Implementation.Type;
    end

                        if ~isa(idata_ExternalOutput.Implementation,'RTW.PointerExpression')


                        idata_ExternalOutput.Implementation = PointerExpr_rt_ExternalOutput;
                        wr.updateInternalData(PointerExpr_rt_ExternalOutput, 'ExternalOutput');
                        end

        


        
        % Pointer Type: Pointer to type_RTModel
        Ptrtype_RTModel_0_0 = coder.types.Pointer;
            Ptrtype_RTModel_0_0.BaseType = type_RTModel;
        Ptrtype_RTModel_0_0.ReadOnly = 0;
        Ptrtype_RTModel_0_0.Volatile = 0;
        
    Registration_RTArg = coder.types.Argument;
    Registration_RTArg.Type   = Ptrtype_RTModel_0_0;
    Registration_RTArg.Name   = 'test_fmi_M';
    Registration_RTArg.IOType = 'OUTPUT';
    tmpRet    = [tmpRet, Registration_RTArg];
    tmpActualReturn = [tmpActualReturn, idata_RTModel];



    func_test_fmi_Prototype = coder.types.Prototype;
    func_test_fmi_Prototype.Arguments  = tmpArgs;
    func_test_fmi_Prototype.Return     = tmpRet;

        func_test_fmi_Prototype.HeaderFile = 'test_fmi.h';
    func_test_fmi_Prototype.SourceFile = 'test_fmi.c';

    func_test_fmi_Interface = RTW.FunctionInterface;
    func_test_fmi_Interface.Prototype    = func_test_fmi_Prototype;
    func_test_fmi_Interface.ActualArgs   = tmpActualArgs;
    func_test_fmi_Interface.ActualReturn = tmpActualReturn;

        func_test_fmi_Prototype.Name = 'test_fmi';
    time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
        func_test_fmi_Interface.Timing = time_constant;
        codeInfo.AllocationFunction =  [codeInfo.AllocationFunction, func_test_fmi_Interface'];

                            tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;



        
            writeCodeInfoFcn_RTArg = coder.types.Argument;
            writeCodeInfoFcn_RTArg.Type   = Ptrtype_RTModel_1_0;
            writeCodeInfoFcn_RTArg.Name   = 'test_fmi_M';
            writeCodeInfoFcn_RTArg.IOType = 'INPUT_OUTPUT';

            tmpArgs    = [tmpArgs, writeCodeInfoFcn_RTArg];
            tmpActualArgs = [tmpActualArgs, idata_RTModel];

                




    % Data Interface: ExternalInput
    idata_ExternalInput = getInternalDataByName(codeInfo.InternalData, 'ExternalInput');

    % Type of : idata_ExternalInput
    if isa(idata_ExternalInput.Implementation,'RTW.PointerExpression')
    type_idata_ExternalInput = idata_ExternalInput.Implementation.TargetRegion.Type;
    else
    type_idata_ExternalInput = idata_ExternalInput.Implementation.Type;
    end

                        if ~isa(idata_ExternalInput.Implementation,'RTW.PointerExpression')


                        idata_ExternalInput.Implementation = PointerExpr_rt_ExternalInput;
                        wr.updateInternalData(PointerExpr_rt_ExternalInput, 'ExternalInput');
                        end


    % Data Interface: ExternalOutput
    idata_ExternalOutput = getInternalDataByName(codeInfo.InternalData, 'ExternalOutput');

    % Type of : idata_ExternalOutput
    if isa(idata_ExternalOutput.Implementation,'RTW.PointerExpression')
    type_idata_ExternalOutput = idata_ExternalOutput.Implementation.TargetRegion.Type;
    else
    type_idata_ExternalOutput = idata_ExternalOutput.Implementation.Type;
    end

                        if ~isa(idata_ExternalOutput.Implementation,'RTW.PointerExpression')


                        idata_ExternalOutput.Implementation = PointerExpr_rt_ExternalOutput;
                        wr.updateInternalData(PointerExpr_rt_ExternalOutput, 'ExternalOutput');
                        end

        


        

    func_OutputUpdate_Prototype = coder.types.Prototype;
    func_OutputUpdate_Prototype.Arguments  = tmpArgs;
    func_OutputUpdate_Prototype.Return     = tmpRet;

        func_OutputUpdate_Prototype.HeaderFile = 'test_fmi.h';
    func_OutputUpdate_Prototype.SourceFile = 'test_fmi.c';

    func_OutputUpdate_Interface = RTW.FunctionInterface;
    func_OutputUpdate_Interface.Prototype    = func_OutputUpdate_Prototype;
    func_OutputUpdate_Interface.ActualArgs   = tmpActualArgs;
    func_OutputUpdate_Interface.ActualReturn = tmpActualReturn;

            func_OutputUpdate_Prototype.Name = 'test_fmi_step';
    time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
        func_OutputUpdate_Interface.Timing = time_0;
        codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate_Interface'];

                    
                


                tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;

        
            writeCodeInfoFcn_RTArg = coder.types.Argument;
            writeCodeInfoFcn_RTArg.Type   = Ptrtype_RTModel_0_0;
            writeCodeInfoFcn_RTArg.Name   = 'test_fmi_M';
            writeCodeInfoFcn_RTArg.IOType = 'INPUT_OUTPUT';

            tmpArgs    = [tmpArgs, writeCodeInfoFcn_RTArg];
            tmpActualArgs = [tmpActualArgs, idata_RTModel];

                

        


        

    func_Terminate_Prototype = coder.types.Prototype;
    func_Terminate_Prototype.Arguments  = tmpArgs;
    func_Terminate_Prototype.Return     = tmpRet;

        func_Terminate_Prototype.HeaderFile = 'test_fmi.h';
    func_Terminate_Prototype.SourceFile = 'test_fmi.c';

    func_Terminate_Interface = RTW.FunctionInterface;
    func_Terminate_Interface.Prototype    = func_Terminate_Prototype;
    func_Terminate_Interface.ActualArgs   = tmpActualArgs;
    func_Terminate_Interface.ActualReturn = tmpActualReturn;

    time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
        func_Terminate_Interface.Timing = time_constant;
                func_Terminate_Prototype.Name = ['test_fmi_terminate'];
        codeInfo.TerminateFunctions =  [codeInfo.TerminateFunctions, func_Terminate_Interface'];


    






        PtrVar_RTModel.Owner = Var_RTModel.Owner;









    




if ~isempty(skippedParameters)
wr.removeSkippedParameters(codeInfo.Parameters(skippedParameters));
codeInfo.Parameters(skippedParameters) = [];
end

        codeInfo.InternalData = [codeInfo.InternalData, idata_RTModel];
    wr.addInternalData(idata_RTModel);

% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo, wr);
end

wr.writeFunctionInterfaces(codeInfo);
wr.writeServerCallPoints(codeInfo);



wr.closeRepo();
    if exist('expInports', 'var')
    save codeInfo.mat codeInfo expInports;
    else
    save codeInfo.mat codeInfo;
    end
returnVal = 1;

% End Function: writeCodeInfoFcn

function data = uniquifyDataAccess(list)
data = RTW.DataInterface.empty;
for idx=1:numel(list)
if ~isPresentDI(data, list(idx))
data(end+1) = list(idx); %#ok<AGROW>
end
end
% End Function: uniquifyDataAccess

function isPresent = isPresentDI(list, di)
isPresent = false;
for idx = 1:numel(list)
if isequal(list(idx), di)
isPresent = true;
break
end
end

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
idx = find(internalIdVec == internalId);
if (isempty(idx) || (length(idx) > 1))
ciMsg = 'Time object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
if (strcmp(ciName, rtwName) ~= 1)
ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName];
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
iData = RTW.DataInterface.empty;
for idxData = 1:numel(iDataVec)
if strcmp(iDataName, iDataVec(idxData).GraphicalName)
iData(end+1) = iDataVec(idxData);
break
end
end
if (isempty(iData) || (length(iData) > 1))
ciMsg = 'Internal Data object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
iData = RTW.DataInterface.empty;
for idxData = 1:numel(iDataVec)
if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
iData = iDataVec(idxData);
break
end
end
if isempty(iData)
ciMsg = 'Internal Data object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getInternalDataByVariableName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo, wr)
    % Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

    % Parameters
    for i = 1:length(codeInfo.Parameters)
    sid = codeInfo.Parameters(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    wr.updateSIDForSubsystemBuild("Parameter", i, sid, codeInfo.Parameters(i));
    codeInfo.Parameters(i).SID = sid;
    end

    % Data Stores
    for i = 1:length(codeInfo.DataStores)
    sid = codeInfo.DataStores(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.DataStores(i).SID = sid;
    wr.updateSIDForSubsystemBuild("DataStore", i, sid);

    end

    % Inports
    for i = 1:length(codeInfo.Inports)
    sid = codeInfo.Inports(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.Inports(i).SID = sid;
    wr.updateSIDForSubsystemBuild("Inport", i, sid);

    end

    % Outports
    for i = 1:length(codeInfo.Outports)
    sid = codeInfo.Outports(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.Outports(i).SID = sid;
    wr.updateSIDForSubsystemBuild("Outport", i, sid);

    end

